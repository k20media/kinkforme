<?php

/**
 * @file
 * Provides procedural hooks for Commerce Marketplace.
 */

use Drupal\commerce_marketplace\StoreAccessControlHandler;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\commerce_product\Entity\ProductInterface;
use Drupal\Core\Entity\EntityStorageException;

/**
 * Implements hook_entity_type_alter().
 */
function commerce_marketplace_entity_type_alter(array &$entity_types) {
  /** @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  $entity_types['commerce_store']->setAccessClass(StoreAccessControlHandler::class);
}


/**
 * Implements hook_form_alter().
 */
function commerce_marketplace_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Check if the form is the commerce product default form or add form or edit form.
  if (in_array($form_id, ['commerce_product_default_form', 'commerce_product_default_add_form', 'commerce_product_default_edit_form'])) {
    // Check if the 'meta' section exists in the form.
    if (isset($form['meta'])) {
      // Hide the 'meta' section.
      $form['meta']['#access'] = FALSE;
    }
  }
}


/**
 * Implements hook_form_FORM_ID_alter() for the commerce product form.
 */
function commerce_marketplace_form_commerce_product_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // Add a custom validation handler.
  $form['#validate'][] = 'commerce_marketplace_product_form_validate';
}


/**
 * Custom validation handler for the commerce product form.
 */
function commerce_marketplace_product_form_validate($form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $store_service = \Drupal::service('commerce_marketplace.current_user_store');
  $store_id = $store_service->getCurrentUserStoreId();

  if (!$store_id) {
    // Set an error on the form if the user does not have a store.
    $form_state->setErrorByName('stores', t('You must create a store before you can create a product.'));
  }
}


/**
 * Implements hook_ENTITY_TYPE_create() for commerce_product entities.
 */
function commerce_marketplace_commerce_product_create(\Drupal\commerce_product\Entity\ProductInterface $product) {
  $store_service = \Drupal::service('commerce_marketplace.current_user_store');
  $store_id = $store_service->getCurrentUserStoreId();

  if ($store_id) {
    // Only proceed if there's a store ID, which there should be if the form validation passed.
    $product->set('stores', $store_id);  // Make sure this line aligns with your field's needs.
  }
  else {
    // Optionally log the unexpected situation since form validation should prevent this.
    \Drupal::logger('commerce_marketplace')->warning('Attempted to create a product without a store. This should have been caught by form validation.');
  }
}
